import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*; // For Observer

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

// Generated by Together


/**
 * An interface to SAAMS:
 * Gate Control Console:
 * Inputs events from gate staff, and displays aircraft and gate information.
 * This class is a controller for the GateInfoDatabase and the AircraftManagementDatabase: sends messages when aircraft dock, have finished disembarking, and are fully embarked and ready to depart.
 * This class also registers as an observer of the GateInfoDatabase and the
 * AircraftManagementDatabase, and is notified whenever any change occurs in those <<model>> elements.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 * @url element://model:project::SAAMS/design:node:::id1un8dcko4qme4cko4sw27.node61
 * CSCU9P6 Project Group 2
 * Student ID: 2421468
 * Date: 22/03/2018
 */
public class GateConsole extends JFrame implements ActionListener, Observer  {  // This class is an Observer of GateInfoDatabase and AircraftManagementDatabase
	
	/**
	*  The GateConsole interface has access to the GateInfoDatabase.
	* @supplierCardinality 1
	* @clientCardinality 0..*
	* @label accesses/observes
	* @directed*/
	private GateInfoDatabase gateInfoDatabase;

	/**
	*  The GateConsole interface has access to the AircraftManagementDatabase.
	* @supplierCardinality 1
	* @clientCardinality 0..*
	* @directed
	* @label accesses/observes*/
	private AircraftManagementDatabase aircraftDB;

	/**
	* This gate's gateNumber
	* - for identifying this gate's information in the GateInfoDatabase.
	*/
	private int gateNumber;
	
	// The GUI has a tabbed pane
	private JTabbedPane tabbedPane = new JTabbedPane();
	
	private JButton quitButton;
	
	// These are the GUI elements on the aircraftPanel
	private JPanel aircraftPanel;

	// Buttons for changing the status of the aircraft allocated to the gate
	private JButton aircraftReadyCleanAndMaintButton;
	private JButton closeFlightButton;	
	private JButton showFlightDetailsButton;
	
	// Displays the flight code of the flight allocated to the gate. It is updated when a new flight is allocated.
	private JLabel flightCodeLabel;
	
	/* The text area where the details of a selected flight are displayed.
	Rows: the maximum number of items to display in each row about a flight.
	Column: enough space for data display. */
	private JTextArea flightDescriptionTextArea = new JTextArea(5,20);
	
	// These are the GUI elements on the gatePanel
	private JPanel gatePanel;
	
	// Buttons for changing the status of the gate
	private JButton gateOccupiedAircraftUnloadingButton;
	private JButton gateFreedButton;
	private JButton showGateStatusButton;
	
	// Displays information about the gate
	private JTextArea gateDescriptionTextArea = new JTextArea(5,20);

	// These are the GUI elements on the addPassengerPanel
	private JPanel addPassengerPanel;
	private JTextField nameTextField;
	private JButton addPassengerButton;
	private JLabel numberOfPassengersLabel;	
	
	// Stores the number of passengers currently on the plane
	private int numPassengers = 0; 	

	// mCode is updated when an aircraft is allocated to the gate
	private int mCode;
	
	// Frame size constants
	private static final int FRAME_WIDTH = 945;
	private static final int FRAME_HEIGHT = 300;
	
	/**
	 * Constructor of GateConsole.
	 */
	public GateConsole(GateInfoDatabase gateInfoDatabase, AircraftManagementDatabase aircraftDB, int locationX, int locationY, int gateNumber) {
		this.gateInfoDatabase = gateInfoDatabase;
		this.aircraftDB = aircraftDB;
		
		this.gateNumber = gateNumber;

		// Set up the GUI
		setTitle("Gate Console");
		setDefaultCloseOperation(HIDE_ON_CLOSE);
		Container window = getContentPane();
		window.setLayout(new FlowLayout());		
		
		quitButton = new JButton("Quit");
		window.add(quitButton);
		quitButton.addActionListener(this);
		
		// Set up the aircraft and gate tab
		// Set up the aircraft JPanel
		aircraftPanel = new JPanel();
		aircraftPanel.setBackground(Color.cyan);
		aircraftPanel.setPreferredSize(new Dimension(500, 160));
		aircraftPanel.add(new JLabel("Manage the aircraft allocated to this gate:"));
		
		flightCodeLabel = new JLabel("");
		aircraftPanel.add(flightCodeLabel);
		
		showFlightDetailsButton = new JButton("Show flight details");
		aircraftPanel.add(showFlightDetailsButton);
		showFlightDetailsButton.addActionListener(this);

		aircraftReadyCleanAndMaintButton = new JButton("Set to Clean and Maintain");
		aircraftPanel.add(aircraftReadyCleanAndMaintButton);
		aircraftReadyCleanAndMaintButton.addActionListener(this);
		
		closeFlightButton = new JButton("Close departing flight");
		aircraftPanel.add(closeFlightButton);
		closeFlightButton.addActionListener(this);
		
		// The user is not able to edit flight details by typing text in the text area
		flightDescriptionTextArea.setEditable(false);
		
		aircraftPanel.add(flightDescriptionTextArea);
		window.add(aircraftPanel);
		
		// Set up the gate JPanel
		gatePanel = new JPanel();
		gatePanel.setBackground(Color.yellow);
		gatePanel.setPreferredSize(new Dimension(400, 160));
		gatePanel.add(new JLabel("Manage the gate:"));
		JLabel gateLabel = new JLabel("Gate " + gateNumber);
		gateLabel.setOpaque(true);
		gatePanel.add(gateLabel);
		
		showGateStatusButton = new JButton("Show gate status");
		gatePanel.add(showGateStatusButton);
		showGateStatusButton.addActionListener(this);
		
		gateOccupiedAircraftUnloadingButton = new JButton("Set gate occupied and aircraft unloading");
		gatePanel.add(gateOccupiedAircraftUnloadingButton);
		gateOccupiedAircraftUnloadingButton.addActionListener(this);
		
		gateFreedButton = new JButton("Free the gate");
		gatePanel.add(gateFreedButton);
		gateFreedButton.addActionListener(this);
		
		// The user is not able to edit gate status by typing text in the text area
		gateDescriptionTextArea.setEditable(false);
		
		gatePanel.add(gateDescriptionTextArea);
		window.add(gatePanel);
		
		// Put the aircraftPanel and gatePanel together in a JPanel and add them to a tab		
		JPanel aircraftAndGatePanel = new JPanel();
		aircraftAndGatePanel.add(aircraftPanel);
		aircraftAndGatePanel.add(gatePanel);
		
		tabbedPane.addTab("Manage aircraft and gate status", null, aircraftAndGatePanel, "Click here to see and change the status of the aircraft and the gate.");
		
		// Set up the passenger tab
		addPassengerPanel = new JPanel();
		addPassengerPanel.setBackground(Color.orange);
		addPassengerPanel.setPreferredSize(new Dimension(400, 160));
		addPassengerPanel.add(new JLabel("Enter passenger name:"));
		nameTextField = new JTextField(20);
		addPassengerPanel.add(nameTextField);
		addPassengerButton = new JButton("Add passenger to current flight");
		addPassengerPanel.add(addPassengerButton);		
		numberOfPassengersLabel = new JLabel("Number of passengers:");
		addPassengerPanel.add(numberOfPassengersLabel);
		addPassengerButton.addActionListener(this);
		
		tabbedPane.addTab("Add passenger to flight", null, addPassengerPanel, "Click here to add a passenger to the departing flight.");
		window.add(tabbedPane);
		
		// Display the frame
		setSize(FRAME_WIDTH, FRAME_HEIGHT);
		setLocation(locationX, locationY);
		setVisible(true);
		
		// Subscribe to the GateInfoDatabase and AircraftManagementDatabase models
		gateInfoDatabase.addObserver(this);
		aircraftDB.addObserver(this);
	}
	
	/**
	 * Handles actions on button clicks.
	 */
	public void actionPerformed(ActionEvent e) {
		// Exit the application.
		if(e.getSource() == quitButton) {
				System.exit(0);
		}
		// Show the details of the flight allocated to the gate.
		else if(e.getSource() == showFlightDetailsButton) {
		
			// Only display the flight details after the flight is allocated to the gate, and before it is departed for takeoff. Check for the status code.
			if(aircraftDB.getStatus(mCode) >= 6 && aircraftDB.getStatus(mCode) <= 16) {
				this.updateFlight();	
				flightDescriptionTextArea.setText("Flight code: " + aircraftDB.getFlightCode(mCode) + "\n"
				+ "mCode: " + mCode + "\n"
				+ "Flight status: " + aircraftDB.getStatus(mCode) + "\n"
				+ "From: " + aircraftDB.getItinerary(mCode).getFrom() + "\n"
				+ "To: " + aircraftDB.getItinerary(mCode).getTo());
			}			
		}
		/* Check if the status of the aircraft at the gate is UNLOADING (status code 7) 
		and set its status to READY_CLEAN_AND_MAINT (status code 8). */
		else if(e.getSource() == aircraftReadyCleanAndMaintButton) {
			if(aircraftDB.getStatus(mCode) == 7) {
				aircraftDB.setStatus(mCode, 8);
			}			
		}
		/* When boarding is complete, or the gate staff decide that no more passengers are presenting themselves, the gate staff "close the flight". 
		The aircraft's status from READY_PASSENGERS (status code 14) becomes READY_DEPART (status code 15). */
		else if(e.getSource() == closeFlightButton) {
			if(aircraftDB.getStatus(mCode) == 14) {
				aircraftDB.setStatus(mCode, 15);
			}			
		}
		// Show the status of the gate.
		else if(e.getSource() == showGateStatusButton) {
			gateDescriptionTextArea.setText("Status: " + gateInfoDatabase.getStatus(gateNumber));			
		}
		/* When the aircraft arrived to the gate:
		Set the nearby gate to OCCUPIED (status code 2).
		Set the aircraft's status to UNLOADING (status code 7). */		
		else if(e.getSource() == gateOccupiedAircraftUnloadingButton) {
			gateInfoDatabase.docked(gateNumber);
			aircraftDB.setStatus(mCode, 7);
				
			// Unload passengers from the flight
			aircraftDB.unloadPass(mCode);				
		}
		/* After the aircraft has departed for takeoff, free the gate.
		The flightCodeLabel and flightDescriptionTextArea should be empty
		as no flight is currently allocated to the gate. */ 
		else if(e.getSource() == gateFreedButton) {
			gateInfoDatabase.departed(gateNumber);
			flightCodeLabel.setText("");
			flightDescriptionTextArea.setText("");		
		}
		/* Get the name of a new passenger and add them to the flight.
		The name cannot be empty. Increment and display the number of passengers 
		on board the aircraft. */
		else if(e.getSource() == addPassengerButton && !nameTextField.getText().isEmpty()) {			
			String name = nameTextField.getText();
			PassengerDetails passenger = new PassengerDetails(name);				
			aircraftDB.addPassenger(mCode, passenger);
			numPassengers++;
			numberOfPassengersLabel.setText("Number of passengers: " + numPassengers);			
		}
	}

	/**
	 * Updates the aircraft allocated to the gate and sets the flight code in the flightCodeLabel.
	 */
	public void updateFlight() {		
		for(int i = 0; i < aircraftDB.maxMRs; i++) {	
				
			/* If the aircraft is taxiing, a gate has been allocated.
			Get the gate number to which the aircraft was allocated.
			Display the flight code of the aircraft. */
			if(aircraftDB.getStatus(i) == 6 && aircraftDB.getGateNum(i) == gateNumber) {			
				flightCodeLabel.setText(aircraftDB.getFlightCode(i));						
				mCode = i;					
			}							
		}	
	}	

	/**
	 * This method gets called when AircraftMangementDatabase updates its observers. 
	 * Fetches information about the aircraft allocated to the gate.	
	 */
	public void update(Observable o, Object arg) {		
		this.updateFlight();
	}
}