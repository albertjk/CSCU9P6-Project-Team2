import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*; // For Observer

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

// Generated by Together


/**
 * An interface to SAAMS:
 * Gate Control Console:
 * Inputs events from gate staff, and displays aircraft and gate information.
 * This class is a controller for the GateInfoDatabase and the AircraftManagementDatabase: sends messages when aircraft dock, have finished disembarking, and are fully embarked and ready to depart.
 * This class also registers as an observer of the GateInfoDatabase and the
 * AircraftManagementDatabase, and is notified whenever any change occurs in those <<model>> elements.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 * @url element://model:project::SAAMS/design:node:::id1un8dcko4qme4cko4sw27.node61
 * @author Albert Jozsa-Kiraly
 * Date: 20/03/2018
 */
public class GateConsole extends JFrame implements ActionListener, Observer  {  // This class is an Observer of GateInfoDatabase and AircraftManagementDatabase
	/**
	*  The GateConsole interface has access to the GateInfoDatabase.
	* @supplierCardinality 1
	* @clientCardinality 0..*
	* @label accesses/observes
	* @directed*/
	GateInfoDatabase gateInfoDatabase;

	/**
	*  The GateConsole interface has access to the AircraftManagementDatabase.
	* @supplierCardinality 1
	* @clientCardinality 0..*
	* @directed
	* @label accesses/observes*/
	private AircraftManagementDatabase aircraftManagementDatabase;

	/**
	* This gate's gateNumber
	* - for identifying this gate's information in the GateInfoDatabase.
	*/
	private int gateNumber;
	
	private JTabbedPane tabbedPane = new JTabbedPane();
	
	private JButton quitButton;
	
	// These are the GUI elements on the aircraftPanel
	private JPanel aircraftPanel;
	
	// Displays the current aircraft. Can be updated.
	private JList aircraftList = new JList(new DefaultListModel());
	
	// Buttons for changing the status of the aircraft allocated to the nearby gate
	private JButton aircraftUnloadingButton;
	private JButton aircraftReadyCleanAndMaintButton;
	private JButton closeFlightButton;
	
	private JButton showFlightDetailsButton;
	
	// The text area where the details of a selected flight are displayed
	// Rows: the number of items to display in each row about a flight
	// Column: enough space for data display
	private JTextArea flightDescriptionTextArea = new JTextArea(5,20);
	
	// Stores the flight code of the aircraft at the current gate. Can be updated.
	private Vector<String> flightList = new Vector();
	
	
	
	// The number of the selected flight to display details of. None initially. 
	private int showingDetailsOfFlight = -1;	
	
	private JPanel gatePanel;
	
	// Displays the current gate. Can be updated.
	private JList gateList = new JList(new DefaultListModel());
	
	
	
	// The number of the selected gate to display details of. None initially. 
	private int showingDetailsOfGate = -1;
	
	// Buttons for changing the status of the nearby gate
	private JButton gateFreedButton;
	//JButton gateReserved;
	private JButton gateOccupiedButton;
	private JButton showGateStatusButton;
	
	// Displays information about the nearby gate.
	private JTextArea gateDescriptionTextArea = new JTextArea(5,20);
	



	
	// These are the GUI elements on the addPassengerPanel
	private JPanel addPassengerPanel;
	private JLabel addPassengerLabel;
	private JLabel nameLabel;
	private JTextField nameTextField;
	private JButton addPassengerButton;
	
	
	/**
	 * Constructor.
	 */
	public GateConsole(GateInfoDatabase gateInfoDatabase, AircraftManagementDatabase aircraftManagementDatabase, int locationX, int locationY) {
		
		this.gateInfoDatabase = gateInfoDatabase;
		this.aircraftManagementDatabase = aircraftManagementDatabase;

		// Set up the GUI
		setTitle("Gate Console");
		setDefaultCloseOperation(HIDE_ON_CLOSE);
		Container window = getContentPane();
		window.setLayout(new GridLayout());		
		
		// Set up the aircraft and gate tab
		// Set up the aircraft JPanel
		aircraftPanel = new JPanel();
		aircraftPanel.setBackground(Color.cyan);
		aircraftPanel.setPreferredSize(new Dimension(500, 200));
		aircraftPanel.add(new JLabel("Manage the aircraft allocated to this gate:"));
		
		showFlightDetailsButton = new JButton("Show flight details");
		aircraftPanel.add(showFlightDetailsButton);
		showFlightDetailsButton.addActionListener(this);
		
		aircraftUnloadingButton = new JButton("Set to Unloading");
		aircraftPanel.add(aircraftUnloadingButton);
		aircraftUnloadingButton.addActionListener(this);

		aircraftReadyCleanAndMaintButton = new JButton("Set to Clean and Maintain");
		aircraftPanel.add(aircraftReadyCleanAndMaintButton);
		aircraftReadyCleanAndMaintButton.addActionListener(this);
		
		closeFlightButton = new JButton("Close departing flight");
		aircraftPanel.add(closeFlightButton);
		closeFlightButton.addActionListener(this);
		
		// The user is not able to edit flight details by typing text in the text area
		flightDescriptionTextArea.setEditable(false);
		
		aircraftPanel.add(aircraftList);
		aircraftPanel.add(flightDescriptionTextArea);
		window.add(aircraftPanel);
		
		// Set up the gate JPanel
		gatePanel = new JPanel();
		gatePanel.setBackground(Color.red);
		gatePanel.setPreferredSize(new Dimension(500, 200));
		gatePanel.add(new JLabel("Manage the gate:"));
		
		gateOccupiedButton = new JButton("Gate occupied");
		gatePanel.add(gateOccupiedButton);
		gateOccupiedButton.addActionListener(this);
		
		gateFreedButton = new JButton("Free the gate");
		gatePanel.add(gateFreedButton);
		gateFreedButton.addActionListener(this);
		
		showGateStatusButton = new JButton("Show gate status");
		gatePanel.add(showGateStatusButton);
		showGateStatusButton.addActionListener(this);
		
		// The user is not able to edit gate status by typing text in the text area
		gateDescriptionTextArea.setEditable(false);
		
		gatePanel.add(gateList);
		gatePanel.add(gateDescriptionTextArea);
		window.add(gatePanel);
		
		// Update the flight status
		//updateFlight();
		
		// Put the aircraftPanel and gatePanel together in a JPanel
		
		JPanel aircraftAndGatePanel = new JPanel();
		aircraftAndGatePanel.add(aircraftPanel);
		aircraftAndGatePanel.add(gatePanel);
		
		//--
		
		tabbedPane.addTab("Aircraft and gate status", null, aircraftAndGatePanel, "Click here to see and change the status of the nearby aircraft and the nearby gate.");
		
		// Set up the passenger tab
		addPassengerPanel = new JPanel();
		
		tabbedPane.addTab("Add passenger to flight", null, addPassengerPanel, "Click here to add a passenger to the departing flight.");
		
		
		/* TODO: If the aircraft's status is READY_PASSENGERS (status code 14),
		then make the addPassengerPanel editable so the gate staff
		can enter passenger details.
		Check passenger details against the passenger list! */
		
		window.add(tabbedPane);
		
		
		// Display the frame
		// TODO: CHANGE NUMBERS TO CONSTANTS
		setSize(550, 490);
		setLocation(locationX, locationY);
		setVisible(true);
		
		
		// Subscribe to the GateInfoDatabase and AircraftManagementDatabase models
		gateInfoDatabase.addObserver(this);
		aircraftManagementDatabase.addObserver(this);
	}
	
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
	}

  	/**
  	 * Notified by the model when it is altered.
  	 */
	public void update(Observable o, Object arg) {
		// Update the flight status
		//updateFlight();
		
	}

	

}
