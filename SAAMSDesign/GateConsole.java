import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*; // For Observer

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

// Generated by Together


/**
 * An interface to SAAMS:
 * Gate Control Console:
 * Inputs events from gate staff, and displays aircraft and gate information.
 * This class is a controller for the GateInfoDatabase and the AircraftManagementDatabase: sends messages when aircraft dock, have finished disembarking, and are fully embarked and ready to depart.
 * This class also registers as an observer of the GateInfoDatabase and the
 * AircraftManagementDatabase, and is notified whenever any change occurs in those <<model>> elements.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 * @url element://model:project::SAAMS/design:node:::id1un8dcko4qme4cko4sw27.node61
 * @author Albert Jozsa-Kiraly
 * Date: 20/03/2018
 */
public class GateConsole extends JFrame implements ActionListener, Observer  {  // This class is an Observer of GateInfoDatabase and AircraftManagementDatabase
	/**
	*  The GateConsole interface has access to the GateInfoDatabase.
	* @supplierCardinality 1
	* @clientCardinality 0..*
	* @label accesses/observes
	* @directed*/
	GateInfoDatabase gateInfoDatabase;

	/**
	*  The GateConsole interface has access to the AircraftManagementDatabase.
	* @supplierCardinality 1
	* @clientCardinality 0..*
	* @directed
	* @label accesses/observes*/
	private AircraftManagementDatabase aircraftDB;

	/**
	* This gate's gateNumber
	* - for identifying this gate's information in the GateInfoDatabase.
	*/
	private int gateNumber;
	
	/* 
	 * Passenger list storing the names of passengers on the next departing flight from the current gate.
	 */
	//PassengerList passengerList;
	
	private JTabbedPane tabbedPane = new JTabbedPane();
	
	private JButton quitButton;
	
	// These are the GUI elements on the aircraftPanel
	private JPanel aircraftPanel;
	
	// Stores the flight code of the aircraft at the current gate. Can be updated.
	
	// Data!!
	private DefaultListModel<String> currentFlight = new DefaultListModel();
	
	// Displays the current aircraft. Can be updated.
	
	// Structure!!
	private JList<String> aircraftList;
	
	// Show the list!!!
	private JScrollPane scrollPane = new JScrollPane();
	
	// Buttons for changing the status of the aircraft allocated to the nearby gate
	private JButton aircraftReadyCleanAndMaintButton;
	private JButton closeFlightButton;
	
	private JButton showFlightDetailsButton;
	
	// The text area where the details of a selected flight are displayed
	// Rows: the number of items to display in each row about a flight
	// Column: enough space for data display
	private JTextArea flightDescriptionTextArea = new JTextArea(5,20);
	
	
	
	
	
	// The number of the selected flight to display details of. None initially. 
	private int showingDetailsOfFlight = -1;	
	
	private JPanel gatePanel;
	
	// This vector will store the current nearby gate. Can be updated.
	//Vector<String> currentGate = new Vector();
	
	
	// Displays the current gate. Can be updated.
	//private JList gateList = new JList(new DefaultListModel());
	
	
	
	// The number of the selected gate to display details of. None initially. 
	private int showingDetailsOfGate = -1;
	
	// Buttons for changing the status of the nearby gate

	//JButton gateReserved;
	private JButton gateOccupiedAircraftUnloadingButton;
	private JButton gateFreedButton;
	private JButton showGateStatusButton;
	
	// Displays information about the nearby gate.
	private JTextArea gateDescriptionTextArea = new JTextArea(5,20);
	

	private JLabel flightCodeLabel;

	
	// These are the GUI elements on the addPassengerPanel
	private JPanel addPassengerPanel;
	private JTextField nameTextField;
	private JButton addPassengerButton;
	
	// Stores the flight codes of the aircrafts in the airport (not those which are free or are in transit or have departed through local airspace).
		private Vector<String> flightList = new Vector();
	  
		// Stores the position where a list item is in the MR array
		private ArrayList<Integer> tracker = new ArrayList();
		
		private int trackerIndex;
		
		
		private int numPassengers = 0; // Stores the number of passengers currently on the plane
		private JLabel numberOfPassengersLabel;
	
	
	/**
	 * Constructor.
	 */
	public GateConsole(GateInfoDatabase gateInfoDatabase, AircraftManagementDatabase aircraftDB, int locationX, int locationY, int gateNumber) {
		
		this.gateInfoDatabase = gateInfoDatabase;
		this.aircraftDB = aircraftDB;
		
		this.gateNumber = gateNumber;
		
		//passengerList = new PassengerList();

		// Set up the GUI
		setTitle("Gate Console");
		setDefaultCloseOperation(HIDE_ON_CLOSE);
		Container window = getContentPane();
		window.setLayout(new FlowLayout());		
		
		quitButton = new JButton("Quit");
		window.add(quitButton);
		quitButton.addActionListener(this);
		
		// Set up the aircraft and gate tab
		// Set up the aircraft JPanel
		aircraftPanel = new JPanel();
		aircraftPanel.setBackground(Color.cyan);
		aircraftPanel.setPreferredSize(new Dimension(500, 160));
		aircraftPanel.add(new JLabel("Manage the aircraft allocated to this gate:"));
		
		flightCodeLabel = new JLabel("");
		//currentFlight.addElement("LA 342"); // TODO: THIS SHOULD BE JUST A JLABEL. I NEED AN MCODE. THEN  I CAN GET THE FLIGHT CODE USING THE MCODE.
		aircraftPanel.add(flightCodeLabel);
		
		showFlightDetailsButton = new JButton("Show flight details");
		aircraftPanel.add(showFlightDetailsButton);
		showFlightDetailsButton.addActionListener(this);

		aircraftReadyCleanAndMaintButton = new JButton("Set to Clean and Maintain");
		aircraftPanel.add(aircraftReadyCleanAndMaintButton);
		aircraftReadyCleanAndMaintButton.addActionListener(this);
		
		closeFlightButton = new JButton("Close departing flight");
		aircraftPanel.add(closeFlightButton);
		closeFlightButton.addActionListener(this);
		
		// The user is not able to edit flight details by typing text in the text area
		flightDescriptionTextArea.setEditable(false);
		
		aircraftPanel.add(flightDescriptionTextArea);
		window.add(aircraftPanel);
		
		// Set up the gate JPanel
		gatePanel = new JPanel();
		gatePanel.setBackground(Color.yellow);
		gatePanel.setPreferredSize(new Dimension(400, 160));
		gatePanel.add(new JLabel("Manage the gate:"));
		JLabel gateLabel = new JLabel("Gate " + gateNumber);
		gateLabel.setOpaque(true);
		gatePanel.add(gateLabel);
		
		showGateStatusButton = new JButton("Show gate status");
		gatePanel.add(showGateStatusButton);
		showGateStatusButton.addActionListener(this);
		
		gateOccupiedAircraftUnloadingButton = new JButton("Set gate occupied and aircraft unloading");
		gatePanel.add(gateOccupiedAircraftUnloadingButton);
		gateOccupiedAircraftUnloadingButton.addActionListener(this);
		
		gateFreedButton = new JButton("Free the gate");
		gatePanel.add(gateFreedButton);
		gateFreedButton.addActionListener(this);
		
		// The user is not able to edit gate status by typing text in the text area
		gateDescriptionTextArea.setEditable(false);
		
		gatePanel.add(gateDescriptionTextArea);
		window.add(gatePanel);
		
		
		// Put the aircraftPanel and gatePanel together in a JPanel and add them to a tab		
		JPanel aircraftAndGatePanel = new JPanel();
		aircraftAndGatePanel.add(aircraftPanel);
		aircraftAndGatePanel.add(gatePanel);
		
		tabbedPane.addTab("Manage aircraft and gate status", null, aircraftAndGatePanel, "Click here to see and change the status of the nearby aircraft and the nearby gate.");
		
		// Set up the passenger tab
		addPassengerPanel = new JPanel();
		addPassengerPanel.setBackground(Color.orange);
		addPassengerPanel.setPreferredSize(new Dimension(400, 160));
		addPassengerPanel.add(new JLabel("Enter passenger name:"));
		nameTextField = new JTextField(20);
		addPassengerPanel.add(nameTextField);
		addPassengerButton = new JButton("Add passenger to current flight");
		addPassengerPanel.add(addPassengerButton);
		
		numberOfPassengersLabel = new JLabel("Number of passengers:");
		addPassengerPanel.add(numberOfPassengersLabel);
		addPassengerButton.addActionListener(this);
		
		tabbedPane.addTab("Add passenger to flight", null, addPassengerPanel, "Click here to add a passenger to the departing flight.");
		
		
		/* TODO: If the aircraft's status is READY_PASSENGERS (status code 14),
		then make the addPassengerPanel editable so the gate staff
		can enter passenger details.
		Check passenger details against the passenger list! */
		
		window.add(tabbedPane);
		
		
		// Display the frame
		// TODO: CHANGE NUMBERS TO CONSTANTS
		setSize(945, 300);
		setLocation(locationX, locationY);
		setVisible(true);
		
		
		// Subscribe to the GateInfoDatabase and AircraftManagementDatabase models
		gateInfoDatabase.addObserver(this);
		aircraftDB.addObserver(this);
	}
	
	int mCode;

	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == quitButton) {
				System.exit(0);
			}
		else if(e.getSource() == showFlightDetailsButton) {
		
			mCode = updateFlight();	
			
			flightDescriptionTextArea.setText("Flight code: " + aircraftDB.getFlightCode(mCode) + "\n"
			+ "mCode: " + mCode + "\n"  // trace is the mCode
			+ "Flight status: " + aircraftDB.getStatus(mCode) + "\n"
			+ "From: " + aircraftDB.getItinerary(mCode).getFrom() + "\n"
			+ "To: " + aircraftDB.getItinerary(mCode).getTo());
		}
		else if(e.getSource() == aircraftReadyCleanAndMaintButton) {
			if(aircraftDB.getStatus(mCode) == 7) {
				aircraftDB.setStatus(mCode, 8);
			}
			
		}
		else if(e.getSource() == closeFlightButton) {
			if(aircraftDB.getStatus(mCode) == 14) {
				aircraftDB.setStatus(mCode, 15);
			}			
		}
		else if(e.getSource() == showGateStatusButton) {
			gateDescriptionTextArea.setText("Status: " + gateInfoDatabase.getStatus(gateNumber));			
		}
		else if(e.getSource() == gateOccupiedAircraftUnloadingButton) {
				gateInfoDatabase.docked(gateNumber);
				aircraftDB.setStatus(mCode, 7);
				
				// Unload passengers
				aircraftDB.unloadPass(mCode);
				
		}
		else if(e.getSource() == gateFreedButton) {
			gateInfoDatabase.departed(gateNumber);
		}
		else if(e.getSource() == addPassengerButton && !nameTextField.getText().isEmpty()) {
			
			//(String flightCode, Itinerary itinerary, PassengerList list)		
			
			String name = nameTextField.getText();
				PassengerDetails passenger = new PassengerDetails(name);				
				aircraftDB.addPassenger(mCode, passenger);
				numPassengers++;
				numberOfPassengersLabel.setText("Number of passengers: " + String.valueOf(numPassengers));		
					
		}
	}

	// Sets the flight code to the label.
	// Returns the mCode of the flight allocated to the gate.
	public int updateFlight() {		
			for(int i = 0; i < aircraftDB.maxMRs; i++) {	
				
				// If the aircraft is taxiing, a gate has been allocated.
				if(aircraftDB.getStatus(i) == 6) {
					
					// Get the gate number to which the aircraft was allocated.
					if(aircraftDB.getGateNum(i) == gateNumber) {
						flightCodeLabel.setText(aircraftDB.getFlightCode(i));
					}
					
					
				}							
			}	
			return 0;
		}
	
	/**
	 * Show the status of the selected gate in the gatesDisplayPanel.
	 */
	private void showGateStatus() {
		if(showingDetailsOfGate == -1) {
			gateDescriptionTextArea.setText("");
		}
		/* If a gate was selected, get its status.
		We can use showingDetailsOfGate to get the status as this variable is equal to the array index of the selected gate in the list.
		(It was assigned after the showGateStatusButton was clicked in actionPerformed.) */
		else {
			gateDescriptionTextArea.setText("Status: " + gateInfoDatabase.getStatus(showingDetailsOfGate));
		}
	}
	
	/**
	 *  Re-populate the displayed flight list from the AircraftManagementDatabase.
	 */
	/**
	 *  Re-populate the displayed flight list from the AircraftManagementDatabase.
	 */
	
//	private void updateFlight() {
//		
//		// First clear the list of previous elements, then update the list.
//		flightList.removeAllElements();
//		
//		tracker.clear(); // Reset the tracker array list		
//		trackerIndex = 0; // Reset the tracker index
//		
//		for(int i = 0; i < aircraftDB.maxMRs; i++) {
//			
//			if(aircraftDB.getStatus(i) >= 2 || aircraftDB.getStatus(i) <= 17) {
//				
//				trackerIndex = i; // Set the index to the current index in the MR array
//				// Adds the current index to the tracker
//				tracker.add(trackerIndex);
//				
//				// Add the list item
//				flightList.addElement(aircraftDB.getFlightCode(i));
//				
//				
//			}
//			
//			
//		}
//	}
	
	/**
	 * Show the details of the selected flight in the flightsDisplayPanel.
	 */
	private void showFlightDetails() {
		
		if(showingDetailsOfFlight == -1) {
			flightDescriptionTextArea.setText("");
		}
		/* If a flight was selected, get the data associated with it. 
		We can use showingDetailsOfFlight to get the data as this variable is equal to the mCode of the selected flight.
		(It was assigned after the showFlightDetailsButton was clicked in actionPerformed.) */
		else {			
			flightDescriptionTextArea.setText("Flight code: " + aircraftDB.getFlightCode(showingDetailsOfFlight) + "\n"
					+ "mCode: " + showingDetailsOfFlight + "\n"
					+ "Flight status: " + aircraftDB.getStatus(showingDetailsOfFlight) + "\n"
					+ "From: " + aircraftDB.getItinerary(showingDetailsOfFlight).getFrom() + "\n"
					+ "To: " + aircraftDB.getItinerary(showingDetailsOfFlight).getTo());	
		}
	}

  	/**
  	 * Notified by the model when it is altered.
  	 */
	public void update(Observable o, Object arg) {
		// Update the flight status
		updateFlight();
	}

	

}
