import java.util.*;

// Generated by Together


/**
 * An interface to SAAMS:
 * Gate Control Console:
 * Inputs events from gate staff, and displays aircraft and gate information.
 * This class is a controller for the GateInfoDatabase and the AircraftManagementDatabase: sends messages when aircraft dock, have finished disembarking, and are fully embarked and ready to depart.
 * This class also registers as an observer of the GateInfoDatabase and the
 * AircraftManagementDatabase, and is notified whenever any change occurs in those <<model>> elements.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 * @url element://model:project::SAAMS/design:node:::id1un8dcko4qme4cko4sw27.node61
 * @author Albert Jozsa-Kiraly
 * Date: 18/03/2018
 */
public class GateConsole implements Observer {  // This class is an Observer of GateInfoDatabase and AircraftManagementDatabase
	/**
	*  The GateConsole interface has access to the GateInfoDatabase.
	* @supplierCardinality 1
	* @clientCardinality 0..*
	* @label accesses/observes
	* @directed*/
	GateInfoDatabase gateInfoDatabase;

	/**
	*  The GateConsole interface has access to the AircraftManagementDatabase.
	* @supplierCardinality 1
	* @clientCardinality 0..*
	* @directed
	* @label accesses/observes*/
	private AircraftManagementDatabase aircraftManagementDatabase;

	/**
	* This gate's gateNumber
	* - for identifying this gate's information in the GateInfoDatabase.
	*/
	private int gateNumber;
  
	/**
	 * Constructor.
	 */
	public GateConsole() {
		
		// Subscribe to the GateInfoDatabase and AircraftManagementDatabase models
		gateInfoDatabase.addObserver(this);
		aircraftManagementDatabase.addObserver(this);
	}

  	/**
  	 * Notified by the model when it is altered.
  	 */
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub
		
	}

}
