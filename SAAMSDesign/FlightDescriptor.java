// Generated by Together
import java.util.ArrayList;



/**
 * Contains all details of a flight: the flight code, itinerary and passenger list.
 * This is the package of information downloaded from an aircraft by the RadarTransceiver as the aircraft enters Stirling Airport's airspace.
 * Not obvious from the class diagram is that the RadarTransceiver boundary class should construct a FlightDescriptor when it "detects" an aircraft, and passes that object to the AircraftManagementDatabase as the parameter of a radarDetect message. (Since this will probably/possibly be local to an event handler method in RadarTransceiver, there is no attribute association from RadarTransceiver to FlightDescriptor.)
 * @stereotype entity
 * @url element://model:project::SAAMS/design:node:::id3oolzcko4qme4cko4sx40.node173
 * @url element://model:project::SAAMS/design:view:::id3oolzcko4qme4cko4sx40
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class FlightDescriptor  {
  /**
   * Constructor: A new FlightDescriptor must be given a flightCode (String), an Itinerary,
   * and the current PassengerList.
   */
	
	
  public FlightDescriptor(String flightCode, Itinerary itinerary, PassengerList list){
	  
	  fCode = flightCode;
	  it = new Itinerary(itinerary.getFrom(), itinerary.getTo(), itinerary.getNext());
	  pList = list;
	  
  }

  /**
   * Each Flight Descriptor contains a list of passengers on the flight.
   * @link aggregation
   * @clientCardinality 1
   * @supplierCardinality 1
   * @label contains
   * @directed*/
  
   
   
  private PassengerList pList;
  /**
   * Each Flight Descriptor contains a flight Itinerary..
   * @link aggregation
   * @clientCardinality 1
   * @supplierCardinality 1
   * @label contains
   * @directed*/
   
   
  private Itinerary it;
/**
 * A short string identifying the flight:
 *
 * Usually airline abbreviation plus number, e.g. BA127.
 * Obtained from flight descriptor when aircraft is first detected.
 *
 * This is the code used in timetables, and is useful to show on public information screens.*/
  
  private String fCode;
  
 
/**
 * Returns the Itinerary 
 * @return
 */
  public Itinerary getIT(){
	  
	  return it;
  }

 /**
  * Returns the Flight Code
  * @return
  */
  public String getfCode(){ 
	
		return fCode;
  }

  //Gets the PassengerList and returns it
  
  public PassengerList getPassList() {
	  
	  return pList;
  }
  
}