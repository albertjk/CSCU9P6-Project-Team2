import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.FlowLayout;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;

// Generated by Together


/**
 * An interface to SAAMS:
 * Public Information Screen:
 * Display of useful information about aircraft.
 * This class registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view
 * @url element://model:project::SAAMS/design:view:::id28ykdcko4qme4cko4sx0e
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class PublicInfo extends JFrame implements Observer{
/**
  * Each Public Information Screen interface has access to the AircraftManagementDatabase.
  * @supplierCardinality 1
  * @clientCardinality 0..*
  * @label accesses/observes
  * @directed*/
  private AircraftManagementDatabase airCraftDB;
  DefaultListModel<String> flightListModel = new DefaultListModel<>();
  JList<String> flightList;
  JScrollPane scrollPane = new JScrollPane();

  public PublicInfo(AircraftManagementDatabase db)
  {
	//reference to database
	     airCraftDB = db;
	     
	     //subscribe to DB
	     airCraftDB.addObserver(this);
	     
	  this.setLayout(new BorderLayout());
	     setTitle("Public Information Display");
	     setLocation(200,100);
	     setSize(800,200);  
	     setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
	     Container window = getContentPane();
	     window.setLayout(new FlowLayout()); 
	     
	     flightList = new JList<String>(flightListModel);
	     scrollPane.setViewportView(flightList);
	     flightList.setFixedCellWidth(250);
	     flightList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	     flightList.setBorder(BorderFactory.createTitledBorder("FLIGHT CODE || STATUS || GATE NUMBER"));
	     
	     getFlightInfo();
	     window.add(scrollPane);
	     setVisible(true);
  }
/**
 * 
 */
private void getFlightInfo() {
	//clear list first
    flightListModel.removeAllElements();
    
    //re-populate but only with the entries that have the correct codes
    for(int i = 0; i < airCraftDB.maxMRs; i++) {
        if(airCraftDB.getStatus(i) == 2) {
            flightListModel.addElement(airCraftDB.getFlightCode(i) + "              " + "Inbound");  
        }
        else if(airCraftDB.getStatus(i) == 3 || airCraftDB.getStatus(i) == 4 || airCraftDB.getStatus(i) == 5) {
            flightListModel.addElement(airCraftDB.getFlightCode(i) + "          " + "Landing");   
        }
        else if(airCraftDB.getStatus(i) == 14) {
            flightListModel.addElement(airCraftDB.getFlightCode(i) + "        " + "Loading Passengers" + "       " + airCraftDB.getGateNum(i));   
        }
    }
	
}

@Override
public void update(Observable arg0, Object arg1) {
	getFlightInfo();
}
}
