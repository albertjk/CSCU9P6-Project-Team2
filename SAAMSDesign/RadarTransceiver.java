import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import javax.swing.JFrame;

// Generated by Together


/**
 * An interface to SAAMS:
 * Radar tracking of arriving and departing aircraft, and transceiver for downloading of flight descriptors
 * (by aircraft entering the local airspace) and uploading of passenger lists (to aircraft about to depart).
 * A screen simulation of the radar/transceiver system.
 * This class is a controller for the AircraftManagementDatabase: it sends messages to notify when a new aircraft is detected
 * (message contains a FlightDescriptor), and when radar contact with an aircraft is lost.
 * It also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::idwwyucko4qme4cko4sgxi
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:node:::id3oolzcko4qme4cko4sx40.node167
 * @url element://model:project::SAAMS/design:view:::id3oolzcko4qme4cko4sx40
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
@SuppressWarnings("serial")
public class RadarTransceiver extends JFrame implements ActionListener{
	private JButton generateInboundFlight;
	private JButton generateIntransitFlight;
	private JButton testStatus;
	private RadarTransceiver RD;
	
/**
  * The Radar Transceiver interface has access to the AircraftManagementDatabase.
  * @clientCardinality 1
  * @supplierCardinality 1
  * @label accesses/observes
  * @directed*/
  private AircraftManagementDatabase airCraftDB;
  
public RadarTransceiver(AircraftManagementDatabase airCraftDB,int locationX, int locationY)
{
	 // Record reference to the DB
    this.airCraftDB = airCraftDB;
    
    // Configure the window
    setTitle("Radar Transceiver");
    setLocation(locationX, locationY);
    setSize(350,150);
    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    Container window = getContentPane();
    window.setLayout(new FlowLayout()); 
    generateInboundFlight = new JButton("Generate Inbound Flight");
    window.add(generateInboundFlight);
    generateInboundFlight.addActionListener(this);
    generateIntransitFlight = new JButton("Generate In-Transit Flight");
    window.add(generateIntransitFlight);
    generateIntransitFlight.addActionListener(this);
    
    testStatus = new JButton("Test Status Code");
    window.add(testStatus);
    testStatus.addActionListener(this);
    
    setVisible(true);
}
	//The values for creating FDs to pas to the DB
	int randNum = 0;
	String randName;
	String randFCode;
	Itinerary randIT;
	PassengerDetails randPD;
	PassengerList randPL;
	FlightDescriptor randFD;
	
/**
 * These generate semi-random flights that are either going to arrive at the airport or pass by it. 
 */
@Override
public void actionPerformed(ActionEvent e) {
	if(e.getSource() == generateInboundFlight)
	{
		randPL = new PassengerList();
		for(int i = 0; i < 5;i++)
		{
			randNum = i;
			randName = "Mary" + randNum;
			randPD = new PassengerDetails(randName);
			randPL.addPassenger(randPD);
		}
		Random rand = new Random();
		randFCode = "F" + rand.nextInt(100) + "GZ";
		randIT = new Itinerary("Glasgow", "Stirling","London");
		randFD = new FlightDescriptor(randFCode, randIT, randPL);
		airCraftDB.radarDetect(randFD);
	}
	if(e.getSource() == generateIntransitFlight)
	{
		randPL = new PassengerList();
		for(int i = 0; i < 5;i++)
		{
			randNum = i;
			randName = "Bill" + randNum;
			randPD = new PassengerDetails(randName);
			randPL.addPassenger(randPD);
		}
		Random rand = new Random();
		randFCode = "F" + rand.nextInt(100) + "GZ";
		randIT = new Itinerary("Glasgow", "New York","London");
		randFD = new FlightDescriptor(randFCode, randIT, randPL);
		airCraftDB.radarDetect(randFD);
	}
	if(e.getSource().equals(testStatus)) {
		
		randPL = new PassengerList();
		for(int i = 0; i < 5;i++)
		{
			randNum = i;
			randName = "Bill" + randNum;
			randPD = new PassengerDetails(randName);
			randPL.addPassenger(randPD);
		}
		Random rand = new Random();
		randFCode = "F" + rand.nextInt(100) + "GZ";
		randIT = new Itinerary("Glasgow", "New York","London");
		randFD = new FlightDescriptor(randFCode, randIT, randPL);
		airCraftDB.radarDetect(randFD);
		
		airCraftDB.setStatus(0, 9);
		}
	}
}


