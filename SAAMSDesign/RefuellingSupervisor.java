import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.*;  // For Observer
 
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
// Generated by Together


/**
 * An interface to SAAMS:
 * Refuelling Supervisor Screen:
 * Inputs events from the Refuelling Supervisor, and displays aircraft information.
 * This class is a controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 */
public class RefuellingSupervisor extends JFrame implements ActionListener, Observer {
/**
  * The Refuelling Supervisor Screen interface has access to the AircraftManagementDatabase.
  * @supplierCardinality 1
  * @clientCardinality 1
  * @label accesses/observes
  * @directed*/
  private AircraftManagementDatabase AMD;
  
  //buttons
  
  private JButton exit;
  private JButton refuelButton;
  
  
  // flightList related 
  
  String[] flights;
  DefaultListModel<String> flightListModel = new DefaultListModel<>();
  
  //Jscroll and list 
  
  JScrollPane scrollPane = new JScrollPane(); // Instantiate a ScrollPane
  JList<String> flightList;
  
  
  public RefuellingSupervisor(AircraftManagementDatabase AMD){
	  
	  this.AMD = AMD; //AMD REF 
	  AMD.addObserver(this); // Subscribe to AMD
	  
	  //User interface layout 
	  
	  this.setLayout(new BorderLayout()); 
	  setLocation(120,120);
	  setSize(350, 350);
	  setTitle("Refuelling Supervisor");
	  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
	  Container window = getContentPane();
	  window.setLayout(new FlowLayout()); // instead of border
	  
	  //FlightList 
	  
	  flightList = new JList<String>(flightListModel);
	  scrollPane.setViewportView(flightList); // sets a viewpoint
	  flightList.setFixedCellWidth(250);
	  flightList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	  flightList.setBorder(BorderFactory.createTitledBorder("FLIGHT CODE || STATUS || COMMENTS"));
	  
	  //populate FlightList
	  getFlightsForFuel(); // method call to get Flights
	  window.add(scrollPane);
	  
	  //Buttons (Refuel button, exit button)
	  
	  refuelButton = new JButton("REPORT FUEL");
	  window.add(refuelButton);
	  refuelButton.addActionListener(this);
	  
	  exit = new JButton("EXIT");
	  window.add(exit);
	  exit.addActionListener(this);
	  
	  setVisible(true); // Makes the window visible
	  
  }
  
  public void getFlightsForFuel() {
	    
	    //Clears list so we start with a clean one
	    flightListModel.removeAllElements();
	    tracker.removeAll(tracker);
	    index = 0;
	    
	    //re-populate based on the code given to certain scenarios. 13 being the refuel scenario
	    for(int i = 0; i < AMD.maxMRs; i++) { // iterate through array, condition of under max amount of MR 
	        if(AMD.getStatus(i) == 13) { // if the status is equal to 13, do below
	            flightListModel.addElement(AMD.getFlightCode(i) + "           " + AMD.getStatus(i) + " REFUEL READY ");
	            index = i;
	            tracker.add(index);
	        }
	    }
	}
ArrayList<Integer> tracker = new ArrayList<Integer>();
private int index;
  
  //Action Listener - handles buttons
  @Override
  public void actionPerformed(ActionEvent e) {
	
	  // QUIT button 
	  
	  if (e.getSource() == exit) {
		  System.exit(0);
	  }
	  
	  // Refuel Button -- needs to change status from refueling to ready 
	  
	  else if(e.getSource() == refuelButton && flightList.isSelectionEmpty()){
		   // conditional based on fullness of flightList 
			
			  //sets selection to the index of the flightList through get method 
			  index = flightList.getSelectedIndex();
			  int trace = tracker.get(index);
			  
			  //If the status is 13, set it to 14 (ready for departure) since that's what happens after refuel process
			  
			  if(AMD.getStatus(trace) == 13){
				  AMD.setStatus(trace, 14);
			  }  
		  }  
	  }	

  
  //Method for updating observers
  
  @Override
  public void update(Observable o, Object arg1) {
	  getFlightsForFuel();	  
  }


}