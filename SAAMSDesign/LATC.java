import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ListSelectionModel;

// Generated by Together


/**
 * An interface to SAAMS:
 * Local Air Traffic Controller Screen:
 * Inputs events from LATC (a person), and displays aircraft information.
 * This class is a controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:view:::id2fh3ncko4qme4cko4swe5
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::idwwyucko4qme4cko4sgxi
 */
public class LATC extends JFrame implements Observer, ActionListener {
/**
  *  The Local Air Traffic Controller Screen interface has access to the AircraftManagementDatabase.
  * @supplierCardinality 1
  * @clientCardinality 1
  * @label accesses/observes
  * @directed*/
	
	//The buttons and lists for the UI
  private AircraftManagementDatabase airDB;
  private JButton landingPermission;  //allows a plane to land
  private JButton confirmLanding; //switches a plane from LANDING to LANDED
  private JButton allocateAirSlot;
  private JButton takeOff;
  private JList<String> waitForLanding;
  private JList<String> inTransit;
  private JList<String> awaitTakeoff;
  private JScrollPane landingPane = new JScrollPane();
  private JScrollPane TransitPane = new JScrollPane();
  private JScrollPane TakeoffPane = new JScrollPane();
  
  
  //Variables
  DefaultListModel<String> incomingFlightModel = new DefaultListModel<>();
  DefaultListModel<String> inTransitFlightModel = new DefaultListModel<>();
  DefaultListModel<String> outGoingFlightModel = new DefaultListModel<>();
  private int indexL;
  private int indexT;
  private int indexTO;
  private ArrayList<Integer> trackerL = new ArrayList<Integer>();
  private ArrayList<Integer> trackerT = new ArrayList<Integer>();
  private ArrayList<Integer> trackerTO = new ArrayList<Integer>();
  
  
  
  public LATC(AircraftManagementDatabase DB) {
	  
	  airDB = DB;
	  airDB.addObserver(this);
	  
	  setTitle("LATC UI");
	  setSize(400,400);
	  setLocation(500,500);
	  setResizable(false);
	  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
	  Container content = getContentPane();
	  content.setLayout(new FlowLayout());
	  
	  landingPermission = new JButton("Grant Landing Permission");
	  content.add(landingPermission);
	  landingPermission.addActionListener(this);
	  
	  confirmLanding = new JButton("Confirm Landing");
	  content.add(confirmLanding);
	  confirmLanding.addActionListener(this);
	  
	  allocateAirSlot = new JButton("Allocate Air Slot");
	  content.add(allocateAirSlot);
	  allocateAirSlot.addActionListener(this);
	  
	  takeOff = new JButton("Take Off");
	  content.add(takeOff);
	  takeOff.addActionListener(this); 
	  
	  //Adding Panels 
	  //landing panel
	  waitForLanding = new JList<String>(incomingFlightModel);
	  landingPane.setViewportView(waitForLanding);
	  waitForLanding.setFixedCellWidth(250);
	  waitForLanding.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	  waitForLanding.setBorder(BorderFactory.createTitledBorder("FLIGHT CODE || STATUS"));
	  
	  //inTransitPanel
	  inTransit = new JList<String>(inTransitFlightModel);
	  TransitPane.setViewportView(inTransit);
	  inTransit.setFixedCellWidth(250);
	  inTransit.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	  inTransit.setBorder(BorderFactory.createTitledBorder("FLIGHT CODE || STATUS"));
	  
	  //Takeoff Panel
	  awaitTakeoff = new JList<String>(outGoingFlightModel);
	  TakeoffPane.setViewportView(awaitTakeoff);
	  awaitTakeoff.setFixedCellWidth(250);
	  awaitTakeoff.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	  awaitTakeoff.setBorder(BorderFactory.createTitledBorder("FLIGHT CODE || STATUS"));
	  
	  getFlightInfo();
	  content.add(landingPane);
	  content.add(TransitPane);
	  content.add(TakeoffPane);
	  setVisible(true);
  }

  /**
   * Checks the current status of the AirDB and alocates the relavent entries to the correct view
   */
private void getFlightInfo() {
	//clear the lists
	incomingFlightModel.removeAllElements();
	inTransitFlightModel.removeAllElements();
	outGoingFlightModel.removeAllElements();
	//clear trackers and indexs
	trackerL.removeAll(trackerL);
	trackerT.removeAll(trackerT);
	trackerTO.removeAll(trackerTO);
	indexL = 0;
	indexT = 0;
	indexTO = 0;
	
	//scan through the list fills in the needed entries to the list.
	for(int i = 0; i < airDB.maxMRs;i++)
	{
		if(airDB.getStatus(i) == 2 || airDB.getStatus(i) == 1)
		{
			incomingFlightModel.addElement(airDB.getFlightCode(i) + "      " + airDB.getStatus(i));
			indexL = i;
			trackerL.add(indexL);
		}
		else if(airDB.getStatus(i) == 3 || airDB.getStatus(i) == 4 || airDB.getStatus(i) == 5)
		{
			inTransitFlightModel.addElement(airDB.getFlightCode(i) + "      " + airDB.getStatus(i));
			indexT = i;
			trackerT.add(indexT);
		}
		else if(airDB.getStatus(i) == 17)
		{
			outGoingFlightModel.addElement(airDB.getFlightCode(i) +  "       " + airDB.getStatus(i));
			indexTO = i;
			trackerTO.add(indexTO);
		}
	}
	
}

@Override
public void actionPerformed(ActionEvent e) {
	if(e.getSource().equals(landingPermission) && waitForLanding.isSelectionEmpty() == false)
	{
		indexL = waitForLanding.getSelectedIndex();
		int trace = trackerL.get(indexL);
		
		if(airDB.getStatus(trace) == 3) //GOC has given ground clearance
		{
			airDB.setStatus(trace, 4); //LATC gives approach clearance
		}
	}
	else if(e.getSource().equals(confirmLanding) && waitForLanding.isSelectionEmpty() == false) {
		
		indexT = waitForLanding.getSelectedIndex();
		int trace = trackerT.get(indexT);
		
		if(airDB.getStatus(trace) == 4) {
			
			airDB.setStatus(trace, 5);
		}
	}
}

@Override
public void update(Observable arg0, Object arg1) {
	getFlightInfo();
}
}
