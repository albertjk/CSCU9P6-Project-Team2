import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*; // For Observer

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;

// Generated by Together


/**
 * An interface to SAAMS:
 * A Ground Operations Controller Screen:
 * Inputs events from GOC (a person), and displays aircraft and gate information.
 * This class is a controller for the GateInfoDatabase and the AircraftManagementDatabase: sending them messages to change the gate or aircraft status information.
 * This class also registers as an observer of the GateInfoDatabase and the AircraftManagementDatabase, and is notified whenever any change occurs in those <<model>> elements.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:node:::id2wdkkcko4qme4cko4svm2.node36
 * @url element://model:project::SAAMS/design:view:::id2wdkkcko4qme4cko4svm2
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1bl79cko4qme4cko4sw5j
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @author Albert Jozsa-Kiraly
 * Date: 18/03/2018
 */
public class GOC extends JFrame implements ActionListener, Observer { // This class is an Observer of GateInfoDatabase and AircraftManagementDatabase
	/** The Ground Operations Controller Screen interface has access to the GateInfoDatabase.
	* @clientCardinality 1
	* @supplierCardinality 1
	* @label accesses/observes
	* @directed*/
	private GateInfoDatabase gateInfoDatabase;
	/**
	* The Ground Operations Controller Screen interface has access to the AircraftManagementDatabase.
	* @clientCardinality 1
	* @supplierCardinality 1
	* @label accesses/observes
	* @directed*/
	private AircraftManagementDatabase aircraftManagementDatabase;
	
	private JButton showflightDetailsButton;
	
	private JButton grantGroundClearanceButton;
	private JButton allocateGateButton;
	private JButton quitButton;
	
	// The display panel for aircrafts and flight details
	private JPanel flightsDisplayPanel;
	
	// The display panel for gates and their statuses
	private JPanel gatesDisplayPanel;
	
	// The list displaying all aircrafts
	private JList aircraftList = new JList(new DefaultListModel());
	
	// The list displaying the two gates
	private JList gateList = new JList(new DefaultListModel());
	
	// The list is embedded in a scrolling window
	private JScrollPane aircraftScrollList = new JScrollPane(aircraftList);
	//private JScrollPane gateScrollList = new JScrollPane(gateList);
	
	// The text area where the details of a selected flight are displayed
	// Rows: the number of items to display in each row about a flight
	// Column: enough space for data display
	private JTextArea flightDescriptionTextArea = new JTextArea(5,20);
	private JTextArea gateDescriptionTextArea = new JTextArea(5,20);
	
	// Aircraft number to display details of. None initially. 
	private int showingDetailsOfFlight = -1;
  
	/**
	 * Constructor of the GOC user interface
	 */
	public GOC(GateInfoDatabase gateInfoDatabase, AircraftManagementDatabase aircraftManagementDatabase) {
		
		this.gateInfoDatabase = gateInfoDatabase;
		this.aircraftManagementDatabase = aircraftManagementDatabase;
		
		// Set up the GUI
		
		
		
		setTitle("Ground Operations Controller");
		setDefaultCloseOperation(HIDE_ON_CLOSE);
		Container window = getContentPane();
		window.setLayout(new FlowLayout());
		
		showflightDetailsButton = new JButton("Show flight details");
		window.add(showflightDetailsButton);
		showflightDetailsButton.addActionListener(this);
		
		grantGroundClearanceButton = new JButton("Grant ground clearance");
		window.add(grantGroundClearanceButton);
		grantGroundClearanceButton.addActionListener(this);
		
		allocateGateButton = new JButton("Allocate gate"); // WHICH GATE???
		window.add(allocateGateButton);
		allocateGateButton.addActionListener(this);
		
		quitButton = new JButton("Quit");
		window.add(quitButton);
		quitButton.addActionListener(this);
		
		// The user is not able to edit flight and gate details by typing text in the text area
		flightDescriptionTextArea.setEditable(false);
		gateDescriptionTextArea.setEditable(false);
		
		// Set up the display panel
		flightsDisplayPanel = new JPanel();
		flightsDisplayPanel.setBackground(Color.cyan);
		flightsDisplayPanel.setPreferredSize(new Dimension(500, 105));
		flightsDisplayPanel.add(new JLabel("Aircraft:"));
		aircraftList.setVisibleRowCount(5);
		flightsDisplayPanel.add(aircraftScrollList);
		flightsDisplayPanel.add(flightDescriptionTextArea);
		
		window.add(flightsDisplayPanel);
		
		updateFlightList();
		
		// Set the gates in the gate list
		Vector gates = new Vector();
		gates.add("Gate 1");
		gates.add("Gate 2");
		gateList.setListData(gates);
		
		gatesDisplayPanel = new JPanel();
		gatesDisplayPanel.setBackground(Color.green);
		gatesDisplayPanel.setPreferredSize(new Dimension(500, 90));
		gatesDisplayPanel.add(new JLabel("Gate:"));
		gateList.setVisibleRowCount(2); // There are only two gates at the airport
		gatesDisplayPanel.add(gateList);
		gatesDisplayPanel.add(gateDescriptionTextArea);	
		
		
		window.add(gatesDisplayPanel);
		
		
		// Display the frame
		// TODO: CHANGE NUMBERS TO CONSTANTS
		setSize(550, 300);
		setLocation(200, 200);
		setVisible(true);
		
		// Subscribe to the GateInfoDatabase and AircraftManagementDatabase models
		gateInfoDatabase.addObserver(this);
		aircraftManagementDatabase.addObserver(this);
	}
	
	Vector flightList = new Vector();
	
	// Re-populate the displayed flight list from the AircraftManagementDatabase
	private void updateFlightList() {
		// FOR NOW: THIS IS JUST A LIST WITH DUMMY VALUES
		
		
		
		flightList.add("Flight code: BA123" + "   mCode: " + "5");
		flightList.add("WE543");
		flightList.add("GGE789");
		flightList.add("EE123");
		flightList.add("WIZZ435");
		flightList.add("BA5167");
		
		aircraftList.setListData(flightList);;
	}
	
	/**
	 * This method checks if an aircraft wants to land at Stirling Airport.
	 * If so, then the data about the flight is added to flightList.
	 * This list is displayed on the GOC screen.
	 * True is returned if the aircraft wants to land, false otherwise.
	 * 2 is the status code for WANTING_TO_LAND in ManagementRecord.
	 * @param mCode
	 */
	public boolean checkIfWantingToLand(int mCode) {
		if(aircraftManagementDatabase.getStatus(mCode) == 2) {
			flightList.add(aircraftManagementDatabase.getFlightCode(mCode));
			//flightList.add("Flight code: " + aircraftManagementDatabase.getFlightCode(mCode) + "   mCode: " + mCode);
			return true;
		}
		return false;
	}

	/**
	 * The user verifies from the information displayed on the GOC screen that enough space is available on the ground for a landing aircraft.
	 * If so, then ground clearance is granted to the aircraft (status code 3) and true is returned by the method.
	 * @param mCode
	 * @return
	 */
	public void givePermissionToLand(int mCode) {		
			aircraftManagementDatabase.setStatus(mCode, 3);							
	}
	
	/**
	 * Update the details of a flight to be displayed in the flightsDisplayPanel.
	 * @param mCode
	 */
	private void showFlightDetails(int mCode) {
		// If no flight is selected, nothing is displayed.
		if(showingDetailsOfFlight == -1) {
			flightDescriptionTextArea.setText("");
		} else {
			flightDescriptionTextArea.setText("Flight code: " + aircraftManagementDatabase.getFlightCode(mCode) + "\n"
					+ "mCode: " + mCode + "\n"
					+ "Flight status: " + aircraftManagementDatabase.getStatus(mCode) + "\n"
					+ "From: " + aircraftManagementDatabase.getItinerary(mCode).getFrom() + "\n"
					+ "To: " + aircraftManagementDatabase.getItinerary(mCode).getTo());
			
			
			// TODO: CHECK WHAT ELSE TO DISPLAY
			
		} 
	}
	
	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == grantGroundClearanceButton) {
			
			// Get the mCode of the aircraft, and give permission to it to land
			int mCode = getSelectedFlightMCode();
			givePermissionToLand(mCode);
			
		} else if(e.getSource() == allocateGateButton) {
			
			// If there is a free gate, allocate that to the selected flight			
			int gateNumber = findFreeGates();			
			if(gateNumber != -1) {
				int mCode = getSelectedFlightMCode();
				allocateGate(gateNumber, mCode);
			} else {
				
				// If there are no free gates, display a message on the text area on the JPanel.
				gateDescriptionTextArea.setText("Unfortunately, there are no free gates.");
			}
			
		}
	}
	
	/**
	 * This method returns the mCode of the selected flight in the flight list.
	 * If no flight is selected, -1 is returned.
	 * @return mCode
	 */
	public int getSelectedFlightMCode() {		
		if(aircraftList.getSelectedValue() != null) {
			return (int) aircraftList.getSelectedValue();
		}
		return -1;
	}

	// TODO: BEFORE ALLOCATION: NEED TO CHECK THAT A GATE IS AVAILABLE
	
	/**
	 * This method checks the statuses of all gates, and finds the first free gate. 
	 * If none are free, -1 is returned.
	 * @return the number of the first free gate
	 */
	public int findFreeGates() {
		int[] gateStatuses = gateInfoDatabase.getStatuses();
		
		// This variable will store the number of the free gate
		int freeGateNumber = -1;
		
		// Find the first free gate, and return the gate number
		for(int i = 0; i < gateStatuses.length; i++) {
			if(gateStatuses[i] == 0) {
				freeGateNumber = i;
			}
		}
		return freeGateNumber;
	}
	
	/**
	 * Forward a status change request to the given gate identified by the gateNumber parameter. 
	 * Called to allocate a free gate to the aircraft identified by mCode. The gate becomes RESERVED.
	 * The aircraft enters TAXIING status, and appears on the GateConsole display.
	 */
	public void allocateGate(int gateNumber, int mCode) {
		gateInfoDatabase.allocate(gateNumber, mCode);
		
	}
	
	/**
	 * Allocated the given gate to the aircraft with the given mCode supplied as a parameter for unloading passengers. The message is forwarded to the given MR for status update.
	 */
	public void taxiTo(int mCode, int gateNumber) {
		aircraftManagementDatabase.taxiTo(mCode, gateNumber);
	}	
  
	/**
	 * Notified by the model when it is altered. Fetch information about the aircrafts and gates.
	 */
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub
		
	}
  
  

}
